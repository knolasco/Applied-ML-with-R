cwd
cwd()
cd()
cls
cs
cl
csl
test <- "test"
test[0]
test[1]
test[1][1]
# Question 1 ----
ds <- "Data Science"
ds_split = strsplit(ds, "")[[1]]
for (character in ds_split){
print(character)
}
range <- 1:5
for (iteration in range){
print(data.frame(replicate(10,sample(0:1,1000,rep=TRUE))))
}
# Question 2 ----
range <- 1:5
for (iteration in range){
print(data.frame(replicate(10,sample(0:1,10,rep=TRUE))))
}
range <- 1:5
for (iteration in range){
print("Dataframe for iteration # ", iteration)
print(data.frame(replicate(10,sample(0:1,10,rep=TRUE))))
}
range <- 1:5
for (iteration in range){
sprintf("Dataframe for iteration # ", iteration)
print(data.frame(replicate(10,sample(0:1,10,rep=TRUE))))
}
# Question 2 ----
range <- 1:5
for (iteration in range){
sprintf("Dataframe for iteration # %s", iteration)
print(data.frame(replicate(10,sample(0:1,10,rep=TRUE))))
}
library(glue)
range <- 1:5
for (iteration in range){
glue("Dataframe for iteration # {iteration}")
print(data.frame(replicate(10,sample(0:1,10,rep=TRUE))))
}
library(glue)
glue("Dataframe for iteration # {iteration}")
range <- 1:5
for (iteration in range){
print(glue("Dataframe for iteration # {iteration}"))
print(data.frame(replicate(10,sample(0:1,10,rep=TRUE))))
}
df_size <- c(100,200, 500, 800, 1000)
for (iteration in range){
current_size <- df_size[iteration]
print(glue("Dataframe of length {current_size} for iteration # {iteration}"))
print(data.frame(replicate(10, sample(0:1,current_size, rep = True))))
}
df_size <- c(100,200, 500, 800, 1000)
for (iteration in range){
current_size <- df_size[iteration]
print(glue("Dataframe of length {current_size} for iteration # {iteration}"))
print(data.frame(replicate(10, sample(0:1,current_size, rep = TRUE))))
}
df_size <- c(100,200, 500, 800, 1000)
df_list <- list()
for (iteration in range){
current_size <- df_size[iteration]
print(glue("Dataframe of length {current_size} for iteration # {iteration}"))
df_list <- append(df_list, data.frame(replicate(10, sample(0:1,current_size, rep = TRUE))))
print(df_list[iteration])
}
df_size <- c(100,200, 500, 800, 1000)
df_list <- list()
for (iteration in range){
current_size <- df_size[iteration]
print(glue("Dataframe of length {current_size} for iteration # {iteration}"))
df_list <- append(df_list, data.frame(replicate(10, sample(0:1,current_size, rep = TRUE))))
print(df_list[:, :, iteration])
}
df_size <- c(100,200, 500, 800, 1000)
df_list <- list()
for (iteration in range){
current_size <- df_size[iteration]
print(glue("Dataframe of length {current_size} for iteration # {iteration}"))
df_list <- append(df_list, data.frame(replicate(10, sample(0:1,current_size, rep = TRUE))))
print(df_list[iteration])
}
df_size <- c(100,200, 500, 800, 1000)
df_list <- list()
for (iteration in range){
current_size <- df_size[iteration]
print(glue("Dataframe of length {current_size} for iteration # {iteration}"))
df_list <- append(df_list, data.frame(replicate(10, sample(0:1,current_size, rep = TRUE))))
print(df_list[iteration])
}
df_size <- c(100,200, 500, 800, 1000)
df_list <- list()
for (iteration in range){
current_size <- df_size[iteration]
print(glue("Dataframe of length {current_size} for iteration # {iteration}"))
df_list <- append(df_list, data.frame(replicate(10, sample(0:1,current_size, rep = TRUE))))
print(df_list[iteration])
}
df_size <- c(100,200, 500, 800, 1000)
df_list <- list()
for (iteration in range){
current_size <- df_size[iteration]
print(glue("Dataframe of length {current_size} for iteration # {iteration}"))
df_list <- append(df_list, data.frame(replicate(10, sample(0:1,current_size, rep = TRUE))))
print(df_list[c(iteration)])
}
df_size <- c(100,200, 500, 800, 1000)
for (iteration in range){
current_size <- df_size[iteration]
print(glue("Dataframe of length {current_size} for iteration # {iteration}"))
print(data.frame(replicate(10, sample(0:1,current_size, rep = TRUE))))
}
# Question 1 ----
# define the string
ds <- "Data Science"
# use strsplit funciton to iterate through characters
ds_split = strsplit(ds, "")[[1]]
# loop through and print
for (character in ds_split){
print(character)
}
# Question 2 ----
library(glue)
# use glue package for formatting print statement
range <- 1:5
for (iteration in range){
print(glue("Dataframe for iteration # {iteration}"))
print(data.frame(replicate(10,sample(0:1,10,rep=TRUE))))
}
# Question 3 ----
df_size <- c(100,200, 500, 800, 1000)
for (iteration in range){
current_size <- df_size[iteration]
print(glue("Dataframe of length {current_size} for iteration # {iteration}"))
print(data.frame(replicate(10, sample(0:1,current_size, rep = TRUE))))
}
# Question 4 ----
df_list = list()
df_size <- c(100,200, 500, 800, 1000)
for (iteration in range){
current_size <- df_size[iteration]
print(glue("Dataframe of length {current_size} for iteration # {iteration}"))
df = data.frame(replicate(10, sample(0:1,current_size, rep = TRUE)))
print(df)
df_list[[iteration]] <- df
}
for (iteration in range){
df <- df_list[[iteration]]
df$y = df$x1 + df$X2 + df$x3 + df$X4 + df$x5 + df$X6 + df$x7 + df$X8 + df$x9 + df$x10
df_list[[iteration]] <- df
}
for (iteration in range){
df <- df_list[[iteration]]
df$y = with(df$x1 + df$X2 + df$x3 + df$X4 + df$x5 + df$X6 + df$x7 + df$X8 + df$x9 + df$x10)
df_list[[iteration]] <- df
}
# create a y_variable for each df
library(dplyr)
for (iteration in range){
df <- df_list[[iteration]]
df <- df %>% mutate(y = x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9 + x10)
df_list[[iteration]] <- df
}
df_list = list()
df_size <- c(100,200, 500, 800, 1000)
for (iteration in range){
current_size <- df_size[iteration]
print(glue("Dataframe of length {current_size} for iteration # {iteration}"))
df = data.frame(replicate(10, sample(0:1,current_size, rep = TRUE)))
print(df)
df_list[[iteration]] <- df
}
for (iteration in range){
df <- df_list[[iteration]]
df <- df %>% mutate(y = x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9 + x10)
df_list[[iteration]] <- df
}
View(df)
for (iteration in range){
df <- df_list[[iteration]]
df <- df %>% mutate(y = X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9 + X10)
df_list[[iteration]] <- df
}
library(modelr)
library(broom)
install.packages("broom")
install.packages("modelr")
library(modelr)
library(broom)
library(modelr)
library(broom)
set.seed(123)
sample <- sample(c(TRUE, FALSE), nrow(advertising), replace = T, prob = c(0.6,0.4))
for iteration in range(){
df <- df_list[[iteration]]
train <- df[sample, ]
test <- df[!sample, ]
model <- lm(y ~ X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9 + X10, data = train)
model_list[[iteration]] <- model
}
set.seed(123)
for iteration in range(){
df <- df_list[[iteration]]
sample <- sample(c(TRUE, FALSE), nrow(df), replace = T, prob = c(0.6,0.4))
train <- df[sample, ]
test <- df[!sample, ]
model <- lm(y ~ X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9 + X10, data = train)
model_list[[iteration]] <- model
}
set.seed(123)
for (iteration in range){
df <- df_list[[iteration]]
sample <- sample(c(TRUE, FALSE), nrow(df), replace = T, prob = c(0.6,0.4))
train <- df[sample, ]
test <- df[!sample, ]
model <- lm(y ~ X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9 + X10, data = train)
model_list[[iteration]] <- model
}
model_list = list()
for (iteration in range){
df <- df_list[[iteration]]
sample <- sample(c(TRUE, FALSE), nrow(df), replace = T, prob = c(0.6,0.4))
train <- df[sample, ]
test <- df[!sample, ]
model <- lm(y ~ X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9 + X10, data = train)
model_list[[iteration]] <- model
}
for (iteration in range){
df <- df_list[[iteration]]
sample <- sample(c(TRUE, FALSE), nrow(df), replace = T, prob = c(0.6,0.4))
train <- df[sample, ]
test <- df[!sample, ]
model <- lm(y ~ X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9 + X10, data = train)
print("===============================================")
print("For model $ {iteration}, the results are :")
print(tidy(model))
print("===============================================")
model_list[[iteration]] <- model
}
for (iteration in range){
df <- df_list[[iteration]]
sample <- sample(c(TRUE, FALSE), nrow(df), replace = T, prob = c(0.6,0.4))
train <- df[sample, ]
test <- df[!sample, ]
model <- lm(y ~ X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9 + X10, data = train)
print("===============================================")
print(glue("For model $ {iteration}, the results are :"))
print(tidy(model))
print("===============================================")
model_list[[iteration]] <- model
}
for (iteration in range){
df <- df_list[[iteration]]
sample <- sample(c(TRUE, FALSE), nrow(df), replace = T, prob = c(0.6,0.4))
train <- df[sample, ]
test <- df[!sample, ]
model <- lm(y ~ X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9 + X10, data = train)
print("===============================================")
print(glue("For model #{iteration}, the results are :"))
print(tidy(model))
print("===============================================")
model_list[[iteration]] <- model
}
model_list <- list()
train_df_list <- list()
library(modelr)
library(broom)
set.seed(123)
for (iteration in range){
df <- df_list[[iteration]]
sample <- sample(c(TRUE, FALSE), nrow(df), replace = T, prob = c(0.6,0.4))
train <- df[sample, ]
test <- df[!sample, ]
model <- lm(y ~ X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9 + X10, data = train)
print("===============================================")
print(glue("For model #{iteration}, the results are :"))
print(tidy(model))
print("===============================================")
model_list[[iteration]] <- model
train_df_list[[iteration]] <- train
}
r_scores <- list()
which.max(r_scores)
r_scores
print(r_scores)
r_scores <- list()
for (iteration in range){
r_scores[[iteration]] <- rsquare(model_list[[iteration]], train_df_list[[iteration]])
}
which.max(r_scores)
print(r_scores)
# Question 1 ----
# Create a string object that is equal to ‘Data Science’. Then write a for loop that prints out each individual letter in the string.
# For example, the first letter printed should be ‘D’. The second should be ‘a’. The third should be ‘t’, and so on.
# define the string
ds <- "Data Science"
# use strsplit funciton to iterate through characters
ds_split = strsplit(ds, "")[[1]]
# loop through and print
for (character in ds_split){
print(character)
}
# Question 2 ----
# Write a for loop to create 5 randomly generated dataframes, and print each of the dataframes.
library(glue)
# use glue package for formatting print statement
range <- 1:5
for (iteration in range){
print(glue("Dataframe for iteration # {iteration}"))
print(data.frame(replicate(10,sample(0:1,10,rep=TRUE))))
}
# Question 3 ----
# Write a for loop to create 5 randomly generated dataframes of length 100,200,500,800, and 1000, and print each of the dataframes.
df_list = list()
df_size <- c(100,200, 500, 800, 1000)
for (iteration in range){
current_size <- df_size[iteration]
print(glue("Dataframe of length {current_size} for iteration # {iteration}"))
df = data.frame(replicate(10, sample(0:1,current_size, rep = TRUE)))
print(df)
df_list[[iteration]] <- df
}
# Question 4 ----
# Using the dataframes generated from the previous question, run a linear regression (specified in whatever way you want) on each of the dataframes.
# Print out the linear regression results for each dataframe using a for loop.
# create a y_variable for each df
library(dplyr)
for (iteration in range){
df <- df_list[[iteration]]
df <- df %>% mutate(y = X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9 + X10)
df_list[[iteration]] <- df
}
model_list <- list()
train_df_list <- list()
library(modelr)
library(broom)
set.seed(123)
for (iteration in range){
df <- df_list[[iteration]]
sample <- sample(c(TRUE, FALSE), nrow(df), replace = T, prob = c(0.6,0.4))
train <- df[sample, ]
test <- df[!sample, ]
model <- lm(y ~ X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9 + X10, data = train)
print("===============================================")
print(glue("For model #{iteration}, the results are :"))
print(tidy(model))
print("===============================================")
model_list[[iteration]] <- model
train_df_list[[iteration]] <- train
}
# Question 5 ----
# Building on the code from Question 4, identify which linear regression has the highest R-Squared
r_scores <- list()
for (iteration in range){
r_scores[[iteration]] <- rsquare(model_list[[iteration]], train_df_list[[iteration]])
}
which.max(r_scores)
print(r_scores)
